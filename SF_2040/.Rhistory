filter(SOV < 1) %>%
group_by(I, J) %>%
summarise(SOV = sum(SOV))
# Check if there are any fractional trips for the day (by OD)
df_day %>% filter(SOV < 1) %>% group_by(I, J) %>% summarise(SOV = sum(SOV))
df_fac <- df_all %>% filter(SOV < 1)
# Add Time period
df_fac <- df_fac %>%
mutate(hour = ceiling(TP / 4))
# Aggregate by hour
df_hour <- df_fac %>%
group_by(I, J, hour) %>%
summarise(SOV = sum(SOV)) %>%
mutate(period = case_when(.$TP %in% EA ~ "EA",
.$TP %in% AM ~ "AM",
.$TP %in% MD ~ "MD",
.$TP %in% PM ~ "PM",
.$TP %in% EV ~ "EV"))
# Aggregate by period
df_period <- df_hour %>%
filter(SOV < 1) %>%
group_by(I, J, period) %>%
summarise(SOV = sum(SOV))
# Aggregate by day
df_day <- df_period %>%
filter(SOV < 1) %>%
group_by(I, J) %>%
summarise(SOV = sum(SOV))
diurnal_factors
diurnal_factors <- read.csv("TimeStep_Distribution.csv") %>%
mutate(hour = ceiling(`X.Hours` / 4)) %>%
mutate(period = case_when(.$`X.Hours` %in% EA ~ "EA",
.$`X.Hours` %in% AM ~ "AM",
.$`X.Hours` %in% MD ~ "MD",
.$`X.Hours` %in% PM ~ "PM",
.$`X.Hours` %in% EV ~ "EV"))
diurnal_factors
df_hour <- df_fac %>%
group_by(I, J, hour) %>%
summarise(SOV = sum(SOV)) %>%
mutate(period = case_when(.$hour %in% c(1:6, 23:24) ~ "EA",
.$hour %in% c(7:9) ~ "AM",
.$hour %in% c(10:15) ~ "MD",
.$hour %in% c(16:17) ~ "PM",
.$hour %in% c(20:22) ~ "EV"))
head(df_hour)
df_hour <- df_fac %>%
group_by(I, J, hour) %>%
summarise(SOV = sum(SOV))
head(df_hour)
df_hour <- df_fac %>%
group_by(I, J, hour) %>%
summarise(SOV = sum(SOV)) %>%
mutate(period = case_when(.$hour %in% c(1:6, 23:24) ~ "EA",
.$hour %in% c(7:9) ~ "AM",
.$hour %in% c(10:15) ~ "MD",
.$hour %in% c(16:17) ~ "PM",
.$hour %in% c(20:22) ~ "EV"))
df_fac <- df_fac %>%
mutate(hour = ceiling(TP / 4)) %>%
mutate(period = case_when(.$TP %in% EA ~ "EA",
.$TP %in% AM ~ "AM",
.$TP %in% MD ~ "MD",
.$TP %in% PM ~ "PM",
.$TP %in% EV ~ "EV"))
# Aggregate by hour
df_hour <- df_fac %>%
group_by(I, J, period, hour) %>%
summarise(SOV = sum(SOV))
head(df_hour)
df_period <- df_hour %>%
filter(SOV < 1) %>%
group_by(I, J, period) %>%
summarise(SOV = sum(SOV))
head(df_period)
dim(df_period)
dim(df_hour)
dim(df_fac)
dim(df_all)
df_fac <- df_all %>%
filter(SOV < 1)
df_day <- df_period %>%
filter(SOV < 1) %>%
group_by(I, J) %>%
summarise(SOV = sum(SOV))
dim(df_day)
df_day %>% filter(SOV < 1) %>% group_by(I, J) %>% summarise(SOV = sum(SOV))
df_day %>% filter(SOV < 1) %>% group_by(I, J) %>% summarise(SOV = sum(SOV)) %>% sum()
discard <- df_day %>% filter(SOV < 1) %>% group_by(I, J) %>% summarise(SOV = sum(SOV))
sum(discard$SOV)
head(diurnal_factors)
diurnal_factors <- read.csv("TimeStep_Distribution.csv") %>%
mutate(hour = ceiling(`X.Hours` / 4)) %>%
mutate(period = case_when(.$`X.Hours` %in% EA ~ "EA",
.$`X.Hours` %in% AM ~ "AM",
.$`X.Hours` %in% MD ~ "MD",
.$`X.Hours` %in% PM ~ "PM",
.$`X.Hours` %in% EV ~ "EV")) %>%
group_by(hour) %>%
mutate(hourly_factors = Direction_1/sum(Direction_1))
head(diurnal_factors)
View(diurnal_factors)
diurnal_factors <- read.csv("TimeStep_Distribution.csv") %>%
mutate(hour = ceiling(`X.Hours` / 4)) %>%
mutate(period = case_when(.$`X.Hours` %in% EA ~ "EA",
.$`X.Hours` %in% AM ~ "AM",
.$`X.Hours` %in% MD ~ "MD",
.$`X.Hours` %in% PM ~ "PM",
.$`X.Hours` %in% EV ~ "EV")) %>%
group_by(hour) %>%
rename(period_factors = Direction_1)%>%
mutate(hourly_factors = period_factors/sum(period_factors))
diurnal_factors <- read.csv("TimeStep_Distribution.csv") %>%
mutate(hour = ceiling(`X.Hours` / 4)) %>%
mutate(period = case_when(.$`X.Hours` %in% EA ~ "EA",
.$`X.Hours` %in% AM ~ "AM",
.$`X.Hours` %in% MD ~ "MD",
.$`X.Hours` %in% PM ~ "PM",
.$`X.Hours` %in% EV ~ "EV")) %>%
group_by(hour) %>%
rename(period_factors = Direction_1)%>%
mutate(hourly_factors = period_factors/sum(period_factors)) %>%
ungroup() %>%
mutate(daily_factors = period_factors/sum(period_factors))
diurnal_factors <- read.csv("TimeStep_Distribution.csv") %>%
mutate(hour = ceiling(`X.Hours` / 4)) %>%
mutate(period = case_when(.$`X.Hours` %in% EA ~ "EA",
.$`X.Hours` %in% AM ~ "AM",
.$`X.Hours` %in% MD ~ "MD",
.$`X.Hours` %in% PM ~ "PM",
.$`X.Hours` %in% EV ~ "EV")) %>%
group_by(hour) %>%
rename(segment = `X.Hours`, period_factors = Direction_1)%>%
mutate(hourly_factors = period_factors/sum(period_factors)) %>%
ungroup() %>%
mutate(daily_factors = period_factors/sum(period_factors)) %>%
select(segment, hour, period, hourly_factors, period_factors, daily_factors)
diurnal_factors %>% summarixe(vars(hourly_factors:daily_factors),sum)
diurnal_factors %>% summarise(vars(hourly_factors:daily_factors),sum)
diurnal_factors %>% summarise(vars(hourly_factors:daily_factors),funs(sum))
diurnal_factors %>% summarise(vars(hourly_factors:daily_factors),sum())
diurnal_factors %>% summarise_at(vars(hourly_factors:daily_factors),sum)
diurnal_factors %>% plot_ly(x = ~segment,
y = ~period_factors,
mode = 'markers', type = 'scatter', color = ~period)
diurnal_factors <- read.csv("TimeStep_Distribution.csv") %>%
mutate(hour = ceiling(`X.Hours` / 4)) %>%
rename(segment = `X.Hours`, period_factors = Direction_1)%>%
mutate(period = case_when(.$segment %in% EA ~ "EA",
.$segment %in% AM ~ "AM",
.$segment %in% MD ~ "MD",
.$segment %in% PM ~ "PM",
.$segment %in% EV ~ "EV")) %>%
group_by(hour) %>%
mutate(hourly_factors = period_factors/sum(period_factors)) %>%
ungroup() %>%
mutate(daily_factors = period_factors/sum(period_factors)) %>%
select(segment, hour, period, hourly_factors, period_factors, daily_factors)
diurnal_factors %>% plot_ly(x = ~segment, type = 'scatter') %>%
# y = ~period_factors,
# mode = 'markers', type = 'scatter', color = ~period)
add_trace(y = ~period_factors, name = 'period',mode = 'lines+markers', color = ~period) %>%
add_trace(y = ~daily_factors, name = 'day', mode = 'lines') %>%
add_trace(y = ~hourly_factors, name = 'hour ', mode = 'markers', color = ~hour)
diurnal_factors %>% plot_ly(x = ~segment) %>%
# y = ~period_factors,
# mode = 'markers', type = 'scatter', color = ~period)
add_trace(y = ~period_factors, name = 'period', type = 'scatter', mode = 'lines+markers', color = ~period) %>%
add_trace(y = ~daily_factors, name = 'day', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~hourly_factors, name = 'hour ', mode = 'markers', type = 'scatter', color = ~hour)
diurnal_factors %>% plot_ly(x = ~segment) %>%
add_trace(y = ~period_factors, name = 'period', type = 'scatter', mode = 'lines+markers', color = ~period) %>%
add_trace(y = ~daily_factors, name = 'day', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~hourly_factors, name = 'hour ', mode = 'markers', type = 'scatter')
distribution <- diurnal_factors
head(distribution)
head(df_hour)
df_hour %>% filter(I == i, J == 1, hour == 1)
df_hour %>% filter(I == 1, J == 1, hour == 1)
df_hour %>% filter(I == 1, J == 4, hour == 1)
max(df_hour$SOV)
library(tidyr)
library(purr)
library(purrr)
df <- df_hour %>% nest()
df <- df_hour %>%
filter(SOV > 1) %>% nest()
head(df)
head(df_hour)
df <- df_hour %>%
filter(SOV > 1) %>%
group_by(I, J, hour) %>% nest()
head(df)
df <- df_hour %>%
filter(SOV > 1)
head(df)
?map()
getRandomSegment <- function(df, distribution, type, seg_hp){
# Get distribution for the time interval (sgement distribution by hour, period and day)
if(type == "hour"){
distribution_selected <- distribution %>% filter(hour == seg_hp) %>%
select(segment, factors = hourly_factors)
else{
if(type == "period"){
distribution_selected <- distribution %>% filter(period == seg_hp) %>%
select(segment, factors = period_factors)
} else{
distribution_selected <- distribution %>%
select(segment, factors = daily_factors)
}
}
}
# random sampling from the distribtuion
x <- sample(distribution_selected$segment,1, prob = distribution_selected$factors)
return(x)
}
getRandomSegment <- function(df, distribution, type, seg_hp){
# Get distribution for the time interval (sgement distribution by hour, period and day)
if(type == "hour"){
distribution_selected <- distribution %>% filter(hour == seg_hp) %>%
select(segment, factors = hourly_factors)
else{
if(type == "period"){
distribution_selected <- distribution %>% filter(period == seg_hp) %>%
select(segment, factors = period_factors)
} else{
distribution_selected <- distribution %>%
select(segment, factors = daily_factors)
}
}
}
# random sampling from the distribtuion
x <- sample(distribution_selected$segment,1, prob = distribution_selected$factors)
return(x)
}
getRandomSegment <- function(df, distribution, type, seg_hp){
# Get distribution for the time interval (sgement distribution by hour, period and day)
if(type == "hour"){
distribution_selected <- distribution %>% filter(hour == seg_hp) %>%
select(segment, factors = hourly_factors)
} else if (type == "period"){
distribution_selected <- distribution %>% filter(period == seg_hp) %>%
select(segment, factors = period_factors)
} else
distribution_selected <- distribution %>%
select(segment, factors = daily_factors)
# random sampling from the distribtuion
x <- sample(distribution_selected$segment,1, prob = distribution_selected$factors)
return(x)
}
df <- df[1:10,]
df
df %>% mutate(segment = map(hour, getRandomSegment, diurnal_factors, "hour", hour))
df %>% mutate(segment = map2(hour, getRandomSegment, diurnal_factors, "hour", hour))
df %>% mutate(segment = pmap(hour, getRandomSegment, diurnal_factors, "hour", hour))
df %>% mutate(segment = map(hour, getRandomSegment, diurnal_factors, "hour", hour))
df %>% mutate(segment = sapply(hour, getRandomSegment, diurnal_factors, "hour", hour))
distribution <- diurnal_factors
df %>% mutate(segment = mapply(hour, getRandomSegment, diurnal_factors, "hour", hour))
?mapply()
df %>% mutate(segment = mapply(getRandomSegment, hour, diurnal_factors, "hour", hour))
df %>% mutate(segment = mapply(getRandomSegment, diurnal_factors, "hour", hour))
getRandomSegment <- function(seg_hp, distribution, type){
# Get distribution for the time interval (sgement distribution by hour, period and day)
if(type == "hour"){
distribution_selected <- distribution %>% filter(hour == seg_hp) %>%
select(segment, factors = hourly_factors)
} else if (type == "period"){
distribution_selected <- distribution %>% filter(period == seg_hp) %>%
select(segment, factors = period_factors)
} else
distribution_selected <- distribution %>%
select(segment, factors = daily_factors)
# random sampling from the distribtuion
x <- sample(distribution_selected$segment,1, prob = distribution_selected$factors)
return(x)
}
sapply(df$hour, getRandomSegment, distribution, "hour")
df$hour
seg_hp = 2
if(type == "hour"){
distribution_selected <- distribution %>% filter(hour == seg_hp) %>%
select(segment, factors = hourly_factors)
} else if (type == "period"){
distribution_selected <- distribution %>% filter(period == seg_hp) %>%
select(segment, factors = period_factors)
} else
distribution_selected <- distribution %>%
select(segment, factors = daily_factors)
type = "hour"
if(type == "hour"){
distribution_selected <- distribution %>% filter(hour == seg_hp) %>%
select(segment, factors = hourly_factors)
} else if (type == "period"){
distribution_selected <- distribution %>% filter(period == seg_hp) %>%
select(segment, factors = period_factors)
} else
distribution_selected <- distribution %>%
select(segment, factors = daily_factors)
distribution_selected
cbind(df$hour, sapply(df$hour, getRandomSegment, distribution, "hour")
)
df
df %>% sapply(hour, getRandomSegment, distribution, "hour")
df <- as.data.frame(df)
df %>% sapply(hour, getRandomSegment, distribution, "hour")
df
df %>% sapply(df$hour, getRandomSegment, distribution, "hour")
sapply(df$hour, getRandomSegment, distribution, "hour")
df %>% map(df$hour, getRandomSegment, distribution, "hour")
df %>% map(hour, getRandomSegment, distribution, "hour")
df %>% map(.hour, getRandomSegment, distribution, "hour")
df %>% map(.$hour, getRandomSegment, distribution, "hour")
df %>% mutate(segment = sapply(.$hour, getRandomSegment, diurnal_factors, "hour"))
df %>% mutate(segment = sapply(hour, getRandomSegment, diurnal_factors, "hour"))
df <- df_hour %>%
filter(SOV > 1) %>%
# group_by(I, J, hour) %>%
mutate(segment = sapply(hour, getRandomSegment, diurnal_factors, "hour"))
segement <- sapply(df$hour, getRandomSegment, diurnal_factors, "hour"))
segement <- sapply(df$hour, getRandomSegment, diurnal_factors, "hour")
dim9df_hour
dim(df_hour)
length(segment)
segment <- sapply(df$hour, getRandomSegment, diurnal_factors, "hour")
length(segment)
dim(df)
df <- df_hour %>% filter(SOV > 1)
segment <- sapply(df$hour, getRandomSegment, diurnal_factors, "hour")
segment
df_hr_1 <-  diurnal_factors %>% filter(hour == 1) %>% select(segment, factors = hourly_factors)
df_hr_1
1 <-  diurnal_factors %>% filter(hour == 1) %>% select(segment, factors = hourly_factors)
df <- df_hour %>% filter(SOV > 1) %>% mutate(lookup = paste0("df_hr_",hour))
head(df)
df_test <- df %>% filter(hour == 1)
dim(df_test)
head(df_test)
get(df_test$lookup[1])
getRandomSegment2 <- function(hour, distribution){
get(distribution)
x <- sample(distribution_selected$segment,1, prob = distribution_selected$factors)
return(x)
}
df_test$segement <- sapply(df_test$hour, df_test$lookup)
df_test$segement <- mapply(getRandomSegment2, df_test$hour, df_test$lookup)
df_test
df_test$segement <- sapply(getRandomSegment2, df_test$hour, df_test$lookup)
df_test$segement <- sapply( df_test$hour, getRandomSegment2, df_test$lookup)
df_test
sapply( df_test$hour[1], getRandomSegment2, df_test$lookup[1])
df_hr_1 <-  diurnal_factors %>% filter(hour == 1) %>% select(segment, factors = hourly_factors)
diurnal_factors
getRandomSegment2 <- function(hour, distribution){
distribution_selected <- diurnal_factors[diurnal_factors$hour == hour]
x <- sample(distribution_selected$segment,1, prob = distribution_selected$hourly_factors)
return(x)
}
df_test$seg <- sapply(df_test$hour, getRandomSegment2, distribution)
sapply(df_test$hour, getRandomSegment2, distribution)
getRandomSegment2 <- function(hour, distribution){
distribution_selected <- diurnal_factors[diurnal_factors$hour == hour]
x <- sample(distribution_selected$segment,1, prob = distribution_selected$hourly_factors)
return(x)
}
getRandomSegment2 <- function(x, distribution){
distribution_selected <- distribution[distribution$hour == x]
x <- sample(distribution_selected$segment, 1, prob = distribution_selected$hourly_factors)
return(x)
}
sapply(df_test$hour, getRandomSegment2, diurnal_factors)
getRandomSegment2 <- function(x, distribution){
distribution_selected <- distribution[distribution$hour == x]
y <- sample(distribution_selected$segment, 1, prob = distribution_selected$hourly_factors)
return(y)
}
sapply(df_test$hour, getRandomSegment2, diurnal_factors)
diurnal_factors
getRandomSegment2 <- function(x, distribution){
distribution_selected <- distribution[distribution$hour == x,]
y <- sample(distribution_selected$segment, 1, prob = distribution_selected$hourly_factors)
return(y)
}
sapply(df_test$hour, getRandomSegment2, diurnal_factors)
which(diurnal_factors$hour[df_test$hour]) %>% head()
?which()
?sapply()
getRandomSegment2 <- function(x) {
y <- sample(diurnal_factors$segment[which(diurnal_factors$hour == x)], 1,
diurnal_factors$hourly_factors[which(diurnal_factors$hour == x)])
return(y)
}
sapply(df_test$hour, getRandomSegment2)
getRandomSegment3 <- function(x) {
y <- sample(diurnal_factors$segment[which(diurnal_factors$hour == x)], 1,
diurnal_factors$hourly_factors[which(diurnal_factors$hour == x)])
return(y)
}
sapply(df_test$hour, getRandomSegment3)
getRandomSegment3 <- function(x) {
y <- sample(diurnal_factors$segment[which(diurnal_factors$hour == x)], 1,
prob = diurnal_factors$hourly_factors[which(diurnal_factors$hour == x)])
return(y)
}
sapply(df_test$hour, getRandomSegment3)
getRandomSegment3 <- function(x) {
y <- sample(diurnal_factors$segment[which(diurnal_factors$hour == x)], 1,
prob = diurnal_factors$hourly_factors[which(diurnal_factors$hour == x)])
return(y)
}
df_hour_assigned <- df_hour %>% filter(SOV > 1)
df_hour_assigned$segment <- sapply(df_test$hour, getRandomSegment3)
df_hour_assigned$segment <- sapply(df_hour_assigned$hour, getRandomSegment3)
head(df_hour)
head(df_hour_assigned)
dim(df_hour)
dim(df_hour_assigned)
dim(df_period)
df_hour %>%
filter(SOV < 1) %>% dim()
568427 + 209699
head(diurnal_factors)
head(df_day)
# Simplified hourly lookup
getRandomSegment_hour <- function(x) {
y <- sample(diurnal_factors$segment[which(diurnal_factors$hour == x)], 1,
prob = diurnal_factors$hourly_factors[which(diurnal_factors$hour == x)])
return(y)
}
# Simplified period lookup
getRandomSegment_period <- function(x) {
y <- sample(diurnal_factors$segment[which(diurnal_factors$period == x)], 1,
prob = diurnal_factors$period_factors[which(diurnal_factors$period == x)])
return(y)
}
# Simplified daily lookup
getRandomSegment_daily <- function(x) {
y <- sample(diurnal_factors$segment, 1, prob = diurnal_factors$daily_factors)
return(y)
}
df_hour_assigned         <- df_hour %>% filter(SOV >= 1)
df_hour_assigned$segment <- sapply(df_hour_assigned$hour, getRandomSegment_hour)
df_period_assigned         <- df_period %>% filter(SOV >= 1)
df_period_assigned$segment <- sapply(df_period_assigned$period, getRandomSegment_period)
df_day_assigned         <- df_day %>% filter(SOV >= 1)
df_day_assigned$segment <- sapply(df_day_assigned$SOV, getRandomSegment_daily)
dim(df_hour_assigned)
dim(df_period_assigned)
dim(df_day_assigned)
head(df_hour_assigned)
head(df_period_assigned)
df_hour_assigned <- df_hour_assigned %>% select(-period,-hour)
df_period_assigned <- df_period_assigned %>% select(-period)
df_assigned <- rbind(df_hour_assigned, df_period_assigned, df_day_assigned)
head(df_assigned)
df_hour_assigned <- df_hour_assigned %>% ungroup() %>% select(-period,-hour)
df_period_assigned <- df_period_assigned %>% ungroup() %>% select(-period)
df_assigned <- rbind(df_hour_assigned, df_period_assigned, df_day_assigned)
df_assigned <- df_assigned %>% ungroup() %>% select(-period)
head(df_assigned)
dim(df_assigned)
df_all %>% filter(SOV < 1) %>% summarise(SOV, c("sum", "count"))
df_all %>% filter(SOV < 1) %>% summarise(trips = sum(SOV), count = n())
df_all %>% filter(SOV < 1) %>% summarise(trips = sum(SOV), count = n())
df_hour %>% filter(SOV < 1) %>% summarise(trips = sum(SOV), count = n())
df_period %>% filter(SOV < 1) %>% summarise(trips = sum(SOV), count = n())
df_day %>% filter(SOV < 1) %>% summarise(trips = sum(SOV), count = n())
df_all %>% filter(SOV < 1) %>% ungroup() %>% summarise(trips = sum(SOV), count = n())
df_hour %>% filter(SOV < 1) %>% ungroup() %>%summarise(trips = sum(SOV), count = n())
df_period %>% filter(SOV < 1) %>% ungroup() %>% summarise(trips = sum(SOV), count = n())
df_day %>% filter(SOV < 1) %>% ungroup() %>% summarise(trips = sum(SOV), count = n())
all <- df_all %>% filter(SOV < 1) %>% ungroup() %>% summarise(trips = sum(SOV), count = n())
hour <- df_hour %>% filter(SOV < 1) %>% ungroup() %>%summarise(trips = sum(SOV), count = n())
period <- df_period %>% filter(SOV < 1) %>% ungroup() %>% summarise(trips = sum(SOV), count = n())
day <- df_day %>% filter(SOV < 1) %>% ungroup() %>% summarise(trips = sum(SOV), count = n())
rbind(all, hour, period, day)
summary <- rbind(all, hour, period, day)
dim(df_assigned)
sum(df_assigned$SOV)
567690.08 / 557157.2
557157.2 + 10532.89
df_assigned_scaled <- df_assigned %>% mutate(SOV = SOV * (all$trips/ sum(SOV)))
head(df_assigned_scaled)
sum(df_assigned_scaled$SOV)
head(df_all)
df_assigned_scaled <- df_assigned %>%
mutate(SOV = SOV * (all$trips/ sum(SOV)),
HOV3 = 0,
TRK = 0)
dim(df_assigned_scaled)
df_unfactored_OD <- df_all %>% filter(SOV >= 1)
df_final <- cbind(df_unfactored_OD, df_assigned_scaled)
df_final <- rbind(df_unfactored_OD, df_assigned_scaled)
head(df_all)
head(df_assigned_scaled)
head(df_day_assigned)
head(df_assigned)
head(df_assigned_scaled)
df_assigned_scaled <- df_assigned %>%
mutate(SOV = SOV * (all$trips/ sum(SOV)),
HOV3 = 0,
TRK = 0) %>%
select(I, J, TP = segment, SOV, HOV3, TRK)
df_final <- rbind(df_unfactored_OD, df_assigned_scaled)
dim(df_final)
df_final %>% summarise(trips = sum(SOV), count = n())
write.csv(df_final, paste0(path,"\\TRIP_TABLE_noFactored_trips.csv"), row.names = FALSE)
df_roden <- read.csv(file.choose())
head(df_roden)
df_rodern %>% colSums()
df_rodern %>% colSum()
df_roden %>% colSums()
